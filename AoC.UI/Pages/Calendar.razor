@page "/"
@using AoC.Shared
@using AoC.Shared.Models
@using AoC.Shared.Services
@inject ICalendarService CalendarService

<h1 class="title">Advent Of Code Editor</h1>

<div class="year-picker">
    <div class="year-inner">
        <div class="year-buttons left">
            @if (ShowFirstYearButton)
            {
                <div @onclick="FirstYear">&lt;&lt;&lt;</div>
            }
            @if (ShowPreviousYearButton)
            {
                <div @onclick="PreviousYear">&lt;</div>
            }
        </div>

        <div class="year-label">
            <div>@_selectedYear</div>
        </div>

        <div class="year-buttons right">
            @if (ShowNextYearButton)
            {
                <div @onclick="NextYear">&gt;</div>
            }
            @if (ShowLastYearButton)
            {
                <div @onclick="LastYear">&gt;&gt;&gt;</div>
            }
        </div>
    </div>
</div>

<div class="calendar">
    <div class="calendar-grid">
        @foreach (var day in _calendarDays)
        {
            <div class="calendar-day @(day.IsLocked ? "locked" : "unlocked")" @onclick="() => OnCalendarDayClick(day)">
                @day.Day
            </div>
        }
    </div>
</div>

@code {

    private int _selectedYear;
    private List<CalendarDay> _calendarDays = [];
    
    private bool ShowFirstYearButton => _selectedYear > Constants.FirstPuzzleYear;
    private bool ShowPreviousYearButton => _selectedYear > Constants.FirstPuzzleYear;
    private bool ShowNextYearButton => _selectedYear < CalendarService.GetLatestPuzzleYear();
    private bool ShowLastYearButton => _selectedYear < CalendarService.GetLatestPuzzleYear();
    
    protected override void OnInitialized()
    {
        _selectedYear = CalendarService.GetLatestPuzzleYear();
        LoadCalendar();
    }

    private void LoadCalendar()
    {
        _calendarDays = CalendarService.GetAvailablePuzzleDays(_selectedYear);
    }

    private void PreviousYear()
    {
        if (_selectedYear <= Constants.FirstPuzzleYear) return;
        _selectedYear--;
        LoadCalendar();
    }
    
    private void FirstYear()
    {
        _selectedYear = Constants.FirstPuzzleYear;
        LoadCalendar();
    }
    
    private void NextYear()
    {
        if (_selectedYear >= CalendarService.GetLatestPuzzleYear()) return;
        _selectedYear++;
        LoadCalendar();
    }
    
    private void LastYear()
    {
        _selectedYear = CalendarService.GetLatestPuzzleYear();
        LoadCalendar();
    }
    
    private void OnCalendarDayClick(CalendarDay day)
    {
        if (day.IsLocked) return;
        // Navigate to the selected day's puzzle
        // Navigation logic can be added here
        Console.WriteLine($"Selected Day: {day.Day} of Year: {_selectedYear}");
    }
}